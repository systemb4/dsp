nachtigal (nightingale) BROKEN
=========
variable based programming language, kind of just an interpreter but not
Independent Student Project (ISP) for The John Cooper School

installation
------------
currently still in development so there is nothing really to install.
currently manual, you can build with make, but you have to copy the lib manually
    to /usr/include/
will be installed as <nachtigal> to system. File extension will be <.nagl> and
    source code will be installed to system so that the user can edit and change
    the code as wanted.

run
---
nachtigal 'filename.nagl'

confiuration
------------
main source code is in src/nachtigal.h and is called in main.c

process
------
code goes through tokenizer, lexer, parser, main run

todo
----

- do
spaces included in lexer when going through
print function (will be in seperate file)
sort stack function
    non code stuff
have a default main.c that is compiled and installed to system
fix up make file
rename all variables to something more sensible/orginize nachtigal.h
documentation of each function line by line comments
documentation on how to use the language

multi-thread?
add comparison ops - lexer

- review
sort function for all of the tokens
addDef function get working
sort function works for both definitions and names
art struct either number or string
only except .nagl files
insertArt function
deleteArt function

progress
-------
doc/PROGRESS.md

notes
-----
structure of final run function:
    go through definition, if it sees "" + "" then it makes a new string and sets it
        equal to that definition (wont be able to concat more than one string), maybe
        concat numbers as strings to strings?
    if sees '' + '' or '' / ''  or '' * '' or '' - '' then it will do math, order of operations
        will be difficult
    And then everything stays in memory but if I call a function like print() then it will be
        able to go back in memory, get that variable and print it, probably not be able to concat
        in the function, only when defining variables
    Maybe make new struct linked list that will take a number or string and a type op like
    (*, /, +, -) so that it can be easier to do mathematics

    be able to go through linked-linked list
    check Name too and not just sort through def

structure AST so that it can be more widely implementable
    be able to link more defs to name but no def should be linked to def and
    no name should be linked to def
    AST is linear sort of that it is a linked list but with multiple types to
    each node
    try to make it a tree and each head of tree is linked to each other OR the
    tree just goes down further as the code progresses
